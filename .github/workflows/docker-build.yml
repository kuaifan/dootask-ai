name: Build and Push Docker Images

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: kuaifan/dootask-ai
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt pytest pytest-xdist

      - name: Run tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PYTHONPATH: ${{ github.workspace }}
        run: |
          source .venv/bin/activate
          pytest tests/ -n auto -v

      - name: Create docker-compose.test.yml
        run: |
          cat > docker-compose.test.yml << 'EOL'
          services:
            app:
              build: .
              ports:
                - "5001:5001"
              environment:
                - PORT=5001
                - WORKERS=4
                - TIMEOUT=120
                - REDIS_HOST=redis
                - REDIS_PORT=6379
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
                interval: 10s
                timeout: 5s
                retries: 3
                start_period: 5s
              depends_on:
                redis:
                  condition: service_healthy

            redis:
              image: redis:7-alpine
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 5s
                timeout: 3s
                retries: 3
              command: redis-server --appendonly yes
          EOL

      - name: Test docker compose
        run: |
          # 清理旧容器
          docker compose -f docker-compose.test.yml down -v

          # 验证和启动服务
          docker compose -f docker-compose.test.yml config
          docker compose -f docker-compose.test.yml up -d

          echo "等待服务启动..."
          # 显示实时日志
          docker compose -f docker-compose.test.yml logs -f &
          LOGS_PID=$!

          # 等待服务健康
          TIMEOUT=60
          ELAPSED=0
          until docker compose -f docker-compose.test.yml ps | grep -q "(healthy)" || [ $ELAPSED -ge $TIMEOUT ]; do
            sleep 5
            ELAPSED=$((ELAPSED + 5))
            echo "已等待 ${ELAPSED}s..."
            
            # 检查服务是否失败
            if docker compose -f docker-compose.test.yml ps | grep -q "(unhealthy)" || docker compose -f docker-compose.test.yml ps | grep -q "Exit"; then
              echo "服务启动失败！"
              docker compose -f docker-compose.test.yml ps
              kill $LOGS_PID
              docker compose -f docker-compose.test.yml down -v
              exit 1
            fi
          done

          # 停止日志输出
          kill $LOGS_PID

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "服务启动超时！"
            docker compose -f docker-compose.test.yml ps
            docker compose -f docker-compose.test.yml logs
            docker compose -f docker-compose.test.yml down -v
            exit 1
          fi

          echo "测试健康检查接口..."
          # 测试健康检查接口
          curl -v http://localhost:5001/health || {
            echo "健康检查失败！"
            docker compose -f docker-compose.test.yml ps
            docker compose -f docker-compose.test.yml logs
            docker compose -f docker-compose.test.yml down -v
            exit 1
          }

          echo "测试成功完成"
          # 清理
          docker compose -f docker-compose.test.yml down -v

  build:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_IMAGE }}
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
